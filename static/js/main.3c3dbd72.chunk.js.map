{"version":3,"sources":["types/Selection.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","api/todos.ts","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","App.tsx","helpers/debounce.ts","helpers/getFilteredTodos.ts","helpers/getTodoById.ts","index.tsx"],"names":["Selection","TodoList","memo","todos","setSelectedTodoId","handleSelectTodo","useCallback","todoId","className","map","todo","id","completed","title","type","onClick","TodoFilter","selectedType","setSelectedType","query","setQuery","applyQuery","value","onChange","event","target","all","active","placeholder","style","pointerEvents","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","getTodos","a","Loader","TodoModal","useState","user","setUser","userId","useEffect","getUser","userById","catch","error","Error","href","name","App","setTodos","selectedTodoId","appliedQuery","setAppliedQuery","todosFromServer","func","timerId","clearTimeout","debounce","visibleTodos","useMemo","filteredTodos","filter","formattedQuery","toLowerCase","replace","includes","getFilteredTodos","selectedTodo","find","getTodoById","length","ReactDOM","render","document","getElementById"],"mappings":"iLAAYA,E,qCCOCC,EAAoCC,gBAAK,YAG/C,IAFLC,EAEI,EAFJA,MACAC,EACI,EADJA,kBAEMC,EAAmBC,uBAAY,SAACC,GACpCH,EAAkBG,KACjB,CAACH,IAEJ,OACE,wBAAOI,UAAU,+BAAjB,UACE,gCACE,+BACE,mCACA,6BACE,sBAAMA,UAAU,OAAhB,SACE,mBAAGA,UAAU,qBAGjB,uCACA,wCAIJ,gCACGL,EAAMM,KAAI,SAAAC,GAAI,OACb,qBACE,UAAQ,OACRF,UAAU,GAFZ,UAKE,oBAAIA,UAAU,eAAd,SACGE,EAAKC,KAGR,oBAAIH,UAAU,eAAd,SACGE,EAAKE,WACJ,sBAAMJ,UAAU,OAAO,UAAQ,gBAA/B,SACE,mBAAGA,UAAU,qBAKnB,oBAAIA,UAAU,2BAAd,SACE,mBAAGA,UAAWE,EAAKE,UACf,mBACA,kBAFJ,SAIGF,EAAKG,UAGV,oBAAIL,UAAU,8BAAd,SACE,wBACE,UAAQ,eACRA,UAAU,SACVM,KAAK,SACLC,QAAS,kBAAMV,EAAiBK,EAAKC,KAJvC,SAME,sBAAMH,UAAU,OAAhB,SACE,mBAAGA,UAAU,uBA9BdE,EAAKC,gB,SDnCVX,K,UAAAA,E,gBAAAA,E,uBAAAA,M,KEWL,IAAMgB,EAAwCd,gBAAK,YAMnD,IALLe,EAKI,EALJA,aACAC,EAII,EAJJA,gBACAC,EAGI,EAHJA,MACAC,EAEI,EAFJA,SACAC,EACI,EADJA,WAiBA,OACE,uBAAMb,UAAU,mBAAhB,UACE,mBAAGA,UAAU,UAAb,SACE,sBAAMA,UAAU,SAAhB,SACE,yBACE,UAAQ,eACRc,MAAOL,EACPM,SAtBiB,SAACC,GAC1BN,EAAgBM,EAAMC,OAAOH,QAkBvB,UAKE,wBAAQA,MAAOtB,EAAU0B,IAAzB,iBACA,wBAAQJ,MAAOtB,EAAU2B,OAAzB,oBACA,wBAAQL,MAAOtB,EAAUY,UAAzB,8BAKN,oBAAGJ,UAAU,qDAAb,UACE,uBACE,UAAQ,cACRM,KAAK,OACLN,UAAU,QACVoB,YAAY,YACZN,MAAOH,EACPI,SAlCkB,SAACC,GACzB,IAAQF,EAAUE,EAAMC,OAAhBH,MAERF,EAASE,GACTD,EAAWC,MAgCP,sBAAMd,UAAU,eAAhB,SACE,mBAAGA,UAAU,8BAGf,sBAAMA,UAAU,gBAAgBqB,MAAO,CAAEC,cAAe,OAAxD,SACGX,GAEC,wBACE,UAAQ,oBACRL,KAAK,SACLN,UAAU,SACVO,QAxCa,WACvBK,EAAS,kB,uBChBb,SAASW,EAAOC,GAEd,IARYC,EAQNC,EAZS,iEAYYF,EAAM,QAGjC,OAXYC,EAWA,IAVL,IAAIE,SAAQ,SAAAC,GACjBC,WAAWD,EAASH,OAUnBK,MAAK,kBAAMC,MAAML,MACjBI,MAAK,SAAAE,GAAG,OAAIA,EAAIC,UAGd,IAAMC,EAAQ,uCAAG,sBAAAC,EAAA,+EAAYZ,EAAY,WAAxB,2CAAH,qDCrBRa,G,MAAmB,kBAC9B,qBAAKpC,UAAU,SAAS,UAAQ,SAAhC,SACE,qBAAKA,UAAU,wBCMNqC,EAAsC3C,gBAAK,YAGjD,IAFLQ,EAEI,EAFJA,KACAN,EACI,EADJA,kBAEA,EAAwB0C,mBAAsB,MAA9C,mBAAOC,EAAP,KAAaC,EAAb,KAEErC,EAIED,EAJFC,GACAE,EAGEH,EAHFG,MACAD,EAEEF,EAFFE,UACAqC,EACEvC,EADFuC,OAGFC,qBAAU,YFGW,SAACD,GAAD,OAAoBlB,EAAG,iBAAiBkB,KEF3DE,CAAQF,GACLX,MAAK,SAAAc,GAAQ,OAAIJ,EAAQI,MACzBC,OAAM,SAAAC,GAAK,OAAI,IAAIC,MAAM,uBAAwBD,QACnD,IAOH,OACE,sBAAK9C,UAAU,kBAAkB,UAAQ,QAAzC,UACE,qBAAKA,UAAU,qBAEbuC,EAIE,sBAAKvC,UAAU,aAAf,UACE,yBAAQA,UAAU,kBAAlB,UACE,qBACEA,UAAU,0CACV,UAAQ,eAFV,wBAIWG,KAIX,wBACEG,KAAK,SACLN,UAAU,SACV,UAAQ,cACRO,QA3BW,WACvBiC,EAAQ,MACR5C,EAAkB,SA6BV,sBAAKI,UAAU,kBAAf,UACE,mBAAGA,UAAU,QAAQ,UAAQ,cAA7B,SACGK,IAGH,oBAAGL,UAAU,QAAQ,UAAQ,aAA7B,UACGI,EAEG,wBAAQJ,UAAU,mBAAlB,kBAEA,wBAAQA,UAAU,kBAAlB,qBAGH,OAED,mBAAGgD,KAAK,2BAAR,SACGT,EAAKU,gBApCd,cAAC,EAAD,UCnBGC,G,YAAgB,WAC3B,MAA0BZ,mBAAiB,IAA3C,mBAAO3C,EAAP,KAAcwD,EAAd,KACA,EAA4Cb,mBAAiB,GAA7D,mBAAOc,EAAP,KAAuBxD,EAAvB,KACA,EAAwC0C,mBAAS9C,EAAU0B,KAA3D,mBAAOT,EAAP,KAAqBC,EAArB,KACA,EAA0B4B,mBAAS,IAAnC,mBAAO3B,EAAP,KAAcC,EAAd,KACA,EAAwC0B,mBAAS,IAAjD,mBAAOe,EAAP,KAAqBC,EAArB,KAEAZ,qBAAU,WACRR,IACGJ,MAAK,SAAAyB,GAAe,OAAIJ,EAASI,MACjCV,OAAM,SAAAC,GAAK,OAAI,IAAIC,MAAM,wBAAyBD,QACpD,IAEH,IAAMjC,EAAaf,sBClCG,SACtB0D,EACA/B,GAEA,IAAIgC,EAEJ,OAAO,SAAC9C,GACN+C,aAAaD,GACbA,EAAU5B,WAAW2B,EAAM/B,EAAOd,ID0BLgD,CAASL,EAAiB,KAAM,IAEzDM,EAAeC,mBACnB,kBElC4B,SAC9BlE,EACAc,EACAE,GAEA,IAAImD,EAEJ,OAAQrD,GACN,KAAKjB,EAAUY,UACb0D,EAAgBnE,EAAMoE,QAAO,SAAA7D,GAAI,OAAIA,EAAKE,aAC1C,MAEF,KAAKZ,EAAU2B,OACb2C,EAAgBnE,EAAMoE,QAAO,SAAA7D,GAAI,OAAKA,EAAKE,aAC3C,MAEF,QACE0D,EAAgBnE,EAGpB,IAAMqE,EAAiBrD,EACpBsD,cACAC,QAAQ,SAAU,KAErB,OAAIF,EACKF,EAAcC,QAAO,SAAA7D,GAAI,OAAIA,EAAKG,MAAM8D,SAASH,MAGnDF,EFMCM,CAAiBzE,EAAOc,EAAc4C,KAC5C,CAAC1D,EAAOc,EAAc4C,IAGlBgB,EGvCmB,SAACtE,EAAgBJ,GAC1C,OAAOA,EAAM2E,MAAK,SAAApE,GAAI,OAAIA,EAAKC,KAAOJ,KHsCjBwE,CAAYnB,EAAgBzD,GAEjD,OACE,qCACE,qBAAKK,UAAU,UAAf,SACE,qBAAKA,UAAU,YAAf,SACE,sBAAKA,UAAU,MAAf,UACE,oBAAIA,UAAU,QAAd,oBAEA,qBAAKA,UAAU,QAAf,SACE,cAACQ,EAAD,CACEC,aAAcA,EACdC,gBAAiBA,EACjBC,MAAOA,EACPC,SAAUA,EACVC,WAAYA,MAIhB,qBAAKb,UAAU,QAAf,SACGL,EAAM6E,OAEH,cAAC/E,EAAD,CACEE,MAAOiE,EACPhE,kBAAmBA,IAGrB,cAAC,EAAD,aAOXyE,GACC,cAAChC,EAAD,CACEnC,KAAMmE,EACNzE,kBAAmBA,SI3E7B6E,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.3c3dbd72.chunk.js","sourcesContent":["export enum Selection {\n  all = 'all',\n  active = 'active',\n  completed = 'completed',\n}\n","import React, { memo, useCallback } from 'react';\nimport { Todo } from '../../types/Todo';\n\ninterface TodoListProps {\n  todos: Todo[];\n  setSelectedTodoId: React.Dispatch<React.SetStateAction<number>>\n}\nexport const TodoList: React.FC<TodoListProps> = memo(({\n  todos,\n  setSelectedTodoId,\n}) => {\n  const handleSelectTodo = useCallback((todoId: number) => {\n    setSelectedTodoId(todoId);\n  }, [setSelectedTodoId]);\n\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {todos.map(todo => (\n          <tr\n            data-cy=\"todo\"\n            className=\"\"\n            key={todo.id}\n          >\n            <td className=\"is-vcentered\">\n              {todo.id}\n            </td>\n\n            <td className=\"is-vcentered\">\n              {todo.completed && (\n                <span className=\"icon\" data-cy=\"iconCompleted\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              )}\n            </td>\n\n            <td className=\"is-vcentered is-expanded\">\n              <p className={todo.completed\n                ? 'has-text-success'\n                : 'has-text-danger'}\n              >\n                {todo.title}\n              </p>\n            </td>\n            <td className=\"has-text-right is-vcentered\">\n              <button\n                data-cy=\"selectButton\"\n                className=\"button\"\n                type=\"button\"\n                onClick={() => handleSelectTodo(todo.id)}\n              >\n                <span className=\"icon\">\n                  <i className=\"far fa-eye\" />\n                </span>\n              </button>\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n});\n","import React, { memo } from 'react';\nimport { Selection } from '../../types/Selection';\n\ninterface TodoFilterProps {\n  selectedType: Selection\n  setSelectedType: React.Dispatch<React.SetStateAction<Selection>>;\n  query: string;\n  setQuery: React.Dispatch<React.SetStateAction<string>>\n  applyQuery: (query: string) => void;\n}\n\nexport const TodoFilter: React.FC<TodoFilterProps> = memo(({\n  selectedType,\n  setSelectedType,\n  query,\n  setQuery,\n  applyQuery,\n}) => {\n  const handleSelectChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setSelectedType(event.target.value as Selection);\n  };\n\n  const handleQueryChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = event.target;\n\n    setQuery(value);\n    applyQuery(value);\n  };\n\n  const handleResetQuery = () => {\n    setQuery('');\n  };\n\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={selectedType}\n            onChange={handleSelectChange}\n          >\n            <option value={Selection.all}>All</option>\n            <option value={Selection.active}>Active</option>\n            <option value={Selection.completed}>Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={handleQueryChange}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {query && (\n            // eslint-disable-next-line jsx-a11y/control-has-associated-label\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={handleResetQuery}\n            />\n          )}\n        </span>\n      </p>\n    </form>\n  );\n});\n","import { Todo } from '../types/Todo';\nimport { User } from '../types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\n// This function creates a promise\n// that is resolved after a given delay\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  // we add some delay to see how the loader works\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = async () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { memo, useEffect, useState } from 'react';\nimport { getUser } from '../../api/todos';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\nimport { Loader } from '../Loader';\n\ninterface TodoModalProps {\n  todo: Todo;\n  setSelectedTodoId: React.Dispatch<React.SetStateAction<number>>;\n}\n\nexport const TodoModal: React.FC<TodoModalProps> = memo(({\n  todo,\n  setSelectedTodoId,\n}) => {\n  const [user, setUser] = useState<User | null>(null);\n  const {\n    id,\n    title,\n    completed,\n    userId,\n  } = todo;\n\n  useEffect(() => {\n    getUser(userId)\n      .then(userById => setUser(userById))\n      .catch(error => new Error('Error fetching user:', error));\n  }, []);\n\n  const handleModalClose = () => {\n    setUser(null);\n    setSelectedTodoId(0);\n  };\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!user\n        ? (\n          <Loader />\n        ) : (\n          <div className=\"modal-card\">\n            <header className=\"modal-card-head\">\n              <div\n                className=\"modal-card-title has-text-weight-medium\"\n                data-cy=\"modal-header\"\n              >\n                {`Todo#${id}`}\n              </div>\n\n              {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n              <button\n                type=\"button\"\n                className=\"delete\"\n                data-cy=\"modal-close\"\n                onClick={handleModalClose}\n              />\n            </header>\n\n            <div className=\"modal-card-body\">\n              <p className=\"block\" data-cy=\"modal-title\">\n                {title}\n              </p>\n\n              <p className=\"block\" data-cy=\"modal-user\">\n                {completed\n                  ? (\n                    <strong className=\"has-text-success\">Done</strong>\n                  ) : (\n                    <strong className=\"has-text-danger\">Planned</strong>\n                  )}\n\n                {' by '}\n\n                <a href=\"mailto:Sincere@april.biz\">\n                  {user.name}\n                </a>\n              </p>\n            </div>\n          </div>\n        )}\n    </div>\n  );\n});\n","import React, {\n  useCallback, useEffect, useMemo, useState,\n} from 'react';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\n\nimport { Todo } from './types/Todo';\nimport { Selection } from './types/Selection';\n\nimport { getTodos } from './api/todos';\n\nimport { getFilteredTodos } from './helpers/getFilteredTodos';\nimport { getTodoById } from './helpers/getTodoById';\nimport { debounce } from './helpers/debounce';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [selectedTodoId, setSelectedTodoId] = useState<number>(0);\n  const [selectedType, setSelectedType] = useState(Selection.all);\n  const [query, setQuery] = useState('');\n  const [appliedQuery, setAppliedQuery] = useState('');\n\n  useEffect(() => {\n    getTodos()\n      .then(todosFromServer => setTodos(todosFromServer))\n      .catch(error => new Error('Error fetching todos:', error));\n  }, []);\n\n  const applyQuery = useCallback(debounce(setAppliedQuery, 500), []);\n\n  const visibleTodos = useMemo(\n    () => getFilteredTodos(todos, selectedType, appliedQuery),\n    [todos, selectedType, appliedQuery],\n  );\n\n  const selectedTodo = getTodoById(selectedTodoId, todos);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                selectedType={selectedType}\n                setSelectedType={setSelectedType}\n                query={query}\n                setQuery={setQuery}\n                applyQuery={applyQuery}\n              />\n            </div>\n\n            <div className=\"block\">\n              {todos.length\n                ? (\n                  <TodoList\n                    todos={visibleTodos}\n                    setSelectedTodoId={setSelectedTodoId}\n                  />\n                ) : (\n                  <Loader />\n                )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {selectedTodo && (\n        <TodoModal\n          todo={selectedTodo}\n          setSelectedTodoId={setSelectedTodoId}\n        />\n      )}\n    </>\n  );\n};\n","export const debounce = (\n  func: React.Dispatch<React.SetStateAction<string>>,\n  delay: number,\n) => {\n  let timerId: NodeJS.Timeout;\n\n  return (query: string) => {\n    clearTimeout(timerId);\n    timerId = setTimeout(func, delay, query);\n  };\n};\n","import { Selection } from '../types/Selection';\nimport { Todo } from '../types/Todo';\n\nexport const getFilteredTodos = (\n  todos: Todo[],\n  selectedType: Selection,\n  query: string,\n) => {\n  let filteredTodos;\n\n  switch (selectedType) {\n    case Selection.completed:\n      filteredTodos = todos.filter(todo => todo.completed);\n      break;\n\n    case Selection.active:\n      filteredTodos = todos.filter(todo => !todo.completed);\n      break;\n\n    default:\n      filteredTodos = todos;\n  }\n\n  const formattedQuery = query\n    .toLowerCase()\n    .replace(/\\s{2,}/, ' ');\n\n  if (formattedQuery) {\n    return filteredTodos.filter(todo => todo.title.includes(formattedQuery));\n  }\n\n  return filteredTodos;\n};\n","import { Todo } from '../types/Todo';\n\nexport const getTodoById = (todoId: number, todos: Todo[]) => {\n  return todos.find(todo => todo.id === todoId);\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}